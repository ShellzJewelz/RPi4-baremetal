#include "exceptions.h"
#include "frame_buffer.h"
#include "uart.h"

const char* entry_error_messages[] = 
{
	"SYNC_INVALID_EL1t",
	"IRQ_INVALID_EL1t",		
	"FIQ_INVALID_EL1t",		
	"ERROR_INVALID_EL1T",		

	"SYNC_INVALID_EL1h",		
	"IRQ_INVALID_EL1h",		
	"FIQ_INVALID_EL1h",		
	"ERROR_INVALID_EL1h",		

	"SYNC_INVALID_EL0_64",		
	"IRQ_INVALID_EL0_64",		
	"FIQ_INVALID_EL0_64",		
	"ERROR_INVALID_EL0_64",	

	"SYNC_INVALID_EL0_32",		
	"IRQ_INVALID_EL0_32",		
	"FIQ_INVALID_EL0_32",		
	"ERROR_INVALID_EL0_32"	
};

typedef enum exceptions_ec
{
	EXCEPTIONS_EC_UNKNOWN_REASON = 0b000000,
	EXCEPTIONS_EC_TRAPPED_WFI_WFE = 0b000001,

	// When AArch32 is supported at any Exception level
	EXCEPTIONS_EC_TRAPPED_MCR_MRC_COPROC_1111 = 0b000011, 
	EXCEPTIONS_EC_TRAPPED_MCRR_MRRC_COPROC_1111 = 0b000100,
	EXCEPTIONS_EC_TRAPPED_MCR_MRC_COPROC_1110 = 0b000101,
	EXCEPTIONS_EC_TRAPPED_LDC_STC = 0b000110,

	EXCEPTIONS_EC_TRAPPED_SVE_SIMD_FLOATING_POINT = 0b000111,

	// When AArch32 is supported at any Exception level
	EXCEPTIONS_EC_TRAPPED_MRRC_COPROC_1110 = 0b001100,

	// When FEAT_BTI is implemented
	EXCEPTIONS_EC_BRANCH_TARGET_EXCEPTION = 0b001101,

	EXCEPTIONS_EC_ILLEGAL_EXECUTION_STATE = 0b001110,

	// When AArch32 is supported at any Exception level
	EXCEPTIONS_EC_SVC_INSTRUCTION_EXECUTION_AARCH32_STATE = 0b010001,

	// When AArch64 is supported at any Exception level
	EXCEPTIONS_EC_SVC_INSTRUCTION_EXECUTION_AARCH64_STATE = 0b010101,
	EXCEPTIONS_EC_SVC_TRAPPED_MSR_MRS_SYS_INSTRUCTION_AARCH64_STATE = 0b011000,

	// When FEAT_SVE is implemented
	EXCEPTIONS_EC_SVC_TRAPPED_SVE = 0b011001,
	EXCEPTIONS_EC_POINTER_AUTH_FAILED = 0b011100,

	EXCEPTIONS_EC_INSTRUCTION_ABORT_LOWER_EXCEPTION_LEVEL = 0b100000,
	EXCEPTIONS_EC_INSTRUCTION_ABORT_CURRENT_EXCEPTION_LEVEL = 0b100001,
	EXCEPTIONS_EC_PC_ALIGNMENT_FAULT = 0b100010,
	EXCEPTIONS_EC_DATA_ABORT_LOWER_EXCEPTION_LEVEL = 0b100100,
	EXCEPTIONS_EC_DATA_ABORT_CURRENT_EXCEPTION_LEVEL = 0b100101,
	EXCEPTIONS_EC_SP_ALIGNMENT_FAULT = 0b100110,

	// When AArch32 is supported at any Exception level
	EXCEPTIONS_EC_TRAPPED_FLOATING_POINT_AARCH32_STATE = 0b101000,

	// When AArch64 is supported at any Exception level
	EXCEPTIONS_EC_TRAPPED_FLOATING_POINT_AARCH64_STATE = 0b101100,

	EXCEPTIONS_EC_SERROR_INTERRUPT = 0b101111,
	EXCEPTIONS_EC_BREAKPOINT_LOWER_EXCEPTION_LEVEL = 0b110000,
	EXCEPTIONS_EC_BREAKPOINT_CURRENT_EXCEPTION_LEVEL = 0b110001,
	EXCEPTIONS_EC_SOFTWARE_STEP_LOWER_EXCEPTION_LEVEL = 0b110010,
	EXCEPTIONS_EC_SOFTWARE_STEP_CURRENT_EXCEPTION_LEVEL = 0b110011,
	EXCEPTIONS_EC_WATCHPOINT_LOWER_EXCEPTION_LEVEL = 0b110100,
	EXCEPTIONS_EC_WATCHPOINT_CURRENT_EXCEPTION_LEVEL = 0b110101,

	// When AArch32 is supported at any Exception level
	EXCEPTIONS_EC_BKPT_INSTRUCTION_AARCH32_STATE = 0b111000,

	// When AArch64 is supported at any Exception level
	EXCEPTIONS_EC_BRK_INSTRUCTION_AARCH64_STATE = 0b111100

} exceptions_ec_e;

extern "C" void exceptions_invalid_entry_message(int type, unsigned long int esr, unsigned long int address)
{
	unsigned long iss = esr & 0x1FFFFFF; // Instruction Specsific Syndrome bits[0:24]
	unsigned long il = (esr & 0x2000000) >> 25; // Instruction Length bit[25]
	unsigned long ec = (esr & 0xFC000000) >> 26; // Exception Class bits[26:31]

	char* exceptions_ec_error = nullptr;

	switch (ec)
	{
	case EXCEPTIONS_EC_UNKNOWN_REASON:
		exceptions_ec_error = "UNKNOWN_REASON";
		break;
	case EXCEPTIONS_EC_TRAPPED_WFI_WFE:
		exceptions_ec_error = "TRAPPED_WFI_WFE";
		break;
	case EXCEPTIONS_EC_TRAPPED_MCR_MRC_COPROC_1111:
		exceptions_ec_error = "TRAPPED_MCR_MRC_COPROC_1111";
		break;
	case EXCEPTIONS_EC_TRAPPED_MCRR_MRRC_COPROC_1111:
		exceptions_ec_error = "TRAPPED_MCRR_MRRC_COPROC_1111";
		break;
	case EXCEPTIONS_EC_TRAPPED_MCR_MRC_COPROC_1110:
		exceptions_ec_error = "TRAPPED_MCR_MRC_COPROC_1110";
		break;
	case EXCEPTIONS_EC_TRAPPED_LDC_STC:
		exceptions_ec_error = "TRAPPED_LDC_STC";
		break;
	case EXCEPTIONS_EC_TRAPPED_SVE_SIMD_FLOATING_POINT:
		exceptions_ec_error = "TRAPPED_SVE_SIMD_FLOATING_POINT";
		break;
	case EXCEPTIONS_EC_TRAPPED_MRRC_COPROC_1110:
		exceptions_ec_error = "TRAPPED_MRRC_COPROC_1110";
		break;
	case EXCEPTIONS_EC_BRANCH_TARGET_EXCEPTION:
		exceptions_ec_error = "BRANCH_TARGET_EXCEPTION";
		break;
	case EXCEPTIONS_EC_ILLEGAL_EXECUTION_STATE:
		exceptions_ec_error = "ILLEGAL_EXECUTION_STATE";
		break;
	case EXCEPTIONS_EC_SVC_INSTRUCTION_EXECUTION_AARCH32_STATE:
		exceptions_ec_error = "SVC_INSTRUCTION_EXECUTION_AARCH32_STATE";
		break;
	case EXCEPTIONS_EC_SVC_INSTRUCTION_EXECUTION_AARCH64_STATE:
		exceptions_ec_error = "SVC_INSTRUCTION_EXECUTION_AARCH64_STATE";
		break;
	case EXCEPTIONS_EC_SVC_TRAPPED_MSR_MRS_SYS_INSTRUCTION_AARCH64_STATE:
		exceptions_ec_error = "SVC_TRAPPED_MSR_MRS_SYS_INSTRUCTION_AARCH64_STATE";
		break;
	case EXCEPTIONS_EC_SVC_TRAPPED_SVE:
		exceptions_ec_error = "SVC_TRAPPED_SVE";
		break;
	case EXCEPTIONS_EC_POINTER_AUTH_FAILED:
		exceptions_ec_error = "POINTER_AUTH_FAILED";
		break;
	case EXCEPTIONS_EC_INSTRUCTION_ABORT_LOWER_EXCEPTION_LEVEL:
		exceptions_ec_error = "INSTRUCTION_ABORT_LOWER_EXCEPTION_LEVEL";
		break;
	case EXCEPTIONS_EC_INSTRUCTION_ABORT_CURRENT_EXCEPTION_LEVEL:
		exceptions_ec_error = "INSTRUCTION_ABORT_CURRENT_EXCEPTION_LEVEL";
		break;
	case EXCEPTIONS_EC_PC_ALIGNMENT_FAULT:
		exceptions_ec_error = "PC_ALIGNMENT_FAULT";
		break;
	case EXCEPTIONS_EC_DATA_ABORT_LOWER_EXCEPTION_LEVEL:
		exceptions_ec_error = "DATA_ABORT_LOWER_EXCEPTION_LEVEL";
		break;
	case EXCEPTIONS_EC_DATA_ABORT_CURRENT_EXCEPTION_LEVEL:
		exceptions_ec_error = "DATA_ABORT_CURRENT_EXCEPTION_LEVEL";
		break;
	case EXCEPTIONS_EC_SP_ALIGNMENT_FAULT:
		exceptions_ec_error = "SP_ALIGNMENT_FAULT";
		break;
	case EXCEPTIONS_EC_TRAPPED_FLOATING_POINT_AARCH32_STATE:
		exceptions_ec_error = "TRAPPED_FLOATING_POINT_AARCH32_STATE";
		break;
	case EXCEPTIONS_EC_TRAPPED_FLOATING_POINT_AARCH64_STATE:
		exceptions_ec_error = "TRAPPED_FLOATING_POINT_AARCH64_STATE";
		break;
	case EXCEPTIONS_EC_SERROR_INTERRUPT:
		exceptions_ec_error = "SERROR_INTERRUPT";
		break;
	case EXCEPTIONS_EC_BREAKPOINT_LOWER_EXCEPTION_LEVEL:
		exceptions_ec_error = "BREAKPOINT_LOWER_EXCEPTION_LEVEL";
		break;
	case EXCEPTIONS_EC_BREAKPOINT_CURRENT_EXCEPTION_LEVEL:
		exceptions_ec_error = "BREAKPOINT_CURRENT_EXCEPTION_LEVEL";
		break;
	case EXCEPTIONS_EC_SOFTWARE_STEP_LOWER_EXCEPTION_LEVEL:
		exceptions_ec_error = "SOFTWARE_STEP_LOWER_EXCEPTION_LEVEL";
		break;
	case EXCEPTIONS_EC_SOFTWARE_STEP_CURRENT_EXCEPTION_LEVEL:
		exceptions_ec_error = "SOFTWARE_STEP_CURRENT_EXCEPTION_LEVEL";
		break;
	case EXCEPTIONS_EC_WATCHPOINT_LOWER_EXCEPTION_LEVEL:
		exceptions_ec_error = "WATCHPOINT_LOWER_EXCEPTION_LEVEL";
		break;
	case EXCEPTIONS_EC_WATCHPOINT_CURRENT_EXCEPTION_LEVEL:
		exceptions_ec_error = "WATCHPOINT_CURRENT_EXCEPTION_LEVEL";
		break;
	case EXCEPTIONS_EC_BKPT_INSTRUCTION_AARCH32_STATE:
		exceptions_ec_error = "BKPT_INSTRUCTION_AARCH32_STATE";
		break;
	case EXCEPTIONS_EC_BRK_INSTRUCTION_AARCH64_STATE:
		exceptions_ec_error = "BRK_INSTRUCTION_AARCH64_STATE";
		break;	
	}

}